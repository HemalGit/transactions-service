openapi: 3.0.0
info:
  title: Customer Transactions Service API
  version: 1.0.0
  description: API for Customer Transactions Service demonstration purposes
servers:
  - url: http://localhost:8080
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authenticate user
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /transaction:
    post:
      tags:
        - Transactions
      summary: Create a transaction
      operationId: createTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
  /reporting/transactions/cost:
    get:
      tags:
        - Reporting
      summary: Total cost of transactions
      operationId: reportingTotalCost
      parameters:
        - in: query
          name: customerId
          schema:
            type: string
        - in: query
          name: productCode
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionsCostResponse"
  /reporting/transactions/volume:
    get:
      tags:
        - Reporting
      summary: Total number of transactions
      operationId: reportingTotalVolume
      parameters:
        - in: query
          name: location
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionsVolumeResponse"
components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: Password
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        email:
          type: string
          description: User email
        token:
          type: string
          description: JWT token
      required:
        - email
        - token
    TransactionRequest:
      type: object
      properties:
        transactionTime:
          type: string
          pattern: ([0-9]{4})-(?:[0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2})
          example: "2018-01-01 14:56"
          description: Transaction date time
        customerId:
          type: string
          description: Customer Id
        quantity:
          type: integer
          minimum: 1
          description: Quantity
        productCode:
          type: string
          description: Product code
      required:
        - transactionTime
        - customerId
        - quantity
        - productCode
    TransactionResponse:
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction ID
      required:
        - transactionId
    TransactionsCostResponse:
      type: object
      properties:
        totalCost:
          type: number
          format: currency
          description: Total cost of transactions
      required:
        - totalCost
    TransactionsVolumeResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total number of transactions
      required:
        - total